@page "/room/{RoomCode}"
@using MovieMatch_Blazor.Shared.FormModels
@inject MovieMatch_Blazor.Shared.Services.IAppState appState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client
@using MovieMatch_Blazor.Client.Components


@if (appState.RoomIsValid)
{
    <h3>Lets get ready to rumble @appState.Username</h3>
    <div>
        <h6><strong>Users in lobby</strong></h6>
        <ul class="list-group" id="currentUsers">
            @foreach (var user in appState.Users)
            {
                <li class="list-group-item">@user</li>
            }
        </ul>
    </div>
    <Chat @ref="chat" />

    <hr>
    @if (appState.UserIsAdmin)
    {
        <button type="button" class="btn btn-danger" @onclick="StartShow">Start the show</button>
    }
}
else
{
    <h3>Looks like that room doesn't exist... or you didn't join from the <a href="/">homepage</a></h3>
    <h6>@Text</h6>
}




@code {
    [Parameter]
    public string RoomCode { get; set; }
    private string Text { get; set; }
    private Chat chat;
    //private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        if (appState.RoomIsValid)
        {
            appState.hubConnection = new HubConnectionBuilder()
                .WithUrl(navigationManager.ToAbsoluteUri("/roomhub"))
                .Build();
            //Everytime a user joins, update the list with the current user status
            appState.hubConnection.On<string>("NewUser", (user) =>
            {
                appState.Users.Add(user);
                StateHasChanged();
            });
            appState.hubConnection.On<Message>("ReceiveMessage", (message) =>
            {
                appState.Messages.Insert(0, message);
                chat.Refresh();
            });
            appState.hubConnection.On<string>("ShowStarted", (message) =>
            {
                appState.ShowStarted = true;
                StateHasChanged();
            });

            //Start the connection and send your relevant information to the hub.
            await appState.hubConnection.StartAsync();
            await appState.hubConnection.SendAsync("Register", appState.RoomCode, appState.Username);
        }
        else
        {
            Text = appState.Text;
            StateHasChanged();
        }
    }
@*    void Send()
    {
        if (!String.IsNullOrEmpty(messageInput))
        {
            hubConnection.SendAsync("SendMessage", appState, messageInput);
            messageInput = "";
        }
    }*@

    void StartShow()
    {
        appState.hubConnection.SendAsync("StartShow", appState);
    }


    public bool IsConnected =>
    appState.hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await appState.hubConnection.DisposeAsync();
    }
}

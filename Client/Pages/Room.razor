@page "/room/{RoomCode}"
@using MovieMatch_Blazor.Shared.FormModels 
@inject MovieMatch_Blazor.Shared.Services.IAppState appState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client


@if (appState.roomIsValid)
{
    <h3>Lets get ready to rumble @appState.Username</h3>
    <div>
        <h6>Users in lobby</h6>
        <ul class="list-group" id="currentUsers">
            @foreach (var user in appState.Users)
            {
                <li class="list-group-item">@user</li>
            }
        </ul>
    </div>
    <div id="hubMessages" style="overflow:scroll; height:300px; border:solid">
        @foreach (var message in Messages)
        {
            <p><strong>@message.Username:</strong> @message.Text</p>
        }
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

    <hr>
}
else
{
    <h3>Looks like that room doesn't exist... or you didn't join from the <a href="/">homepage</a></h3>
    <h6>@Text</h6>
}



@code {
    [Parameter]
    public string RoomCode { get; set; }
    private string Text { get; set; }
    private string messageInput { get; set; }
    private List<Message> Messages { get; set; } = new List<Message>();

    private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        if (appState.roomIsValid)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/roomhub"))
            .Build();
            //Everytime a user joins, update the list with the current user status
            hubConnection.On<string>("NewUser", (user) =>
            {
                appState.Users.Add(user);
                StateHasChanged();
            });
            hubConnection.On<Message>("ReceiveMessage", (message) =>
            {
                Messages.Add(message);
                StateHasChanged();
            });

            //Start the connection and send your relevant information to the hub.
            await hubConnection.StartAsync();
            await hubConnection.SendAsync("register", appState);
        }
        else
        {
            Text = appState.Text;
            StateHasChanged();
        }
    }
    void Send() {
        hubConnection.SendAsync("SendMessage", appState, messageInput);
        messageInput = "";
    }


    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
